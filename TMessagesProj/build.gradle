apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

repositories {
    mavenCentral()
    google()
}

configurations {
    compile.exclude module: 'support-v4'
}

configurations.all {
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}

dependencies {
    implementation 'androidx.interpolator:interpolator:1.0.0'
    implementation 'androidx.core:core:1.6.0'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.3'
    implementation 'androidx.viewpager:viewpager:1.0.0'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.sharetarget:sharetarget:1.1.0"

    implementation "androidx.core:core-ktx:1.7.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    compileOnly 'org.checkerframework:checker-qual:2.5.2'
    compileOnly 'org.checkerframework:checker-compat-qual:2.5.0'
    implementation 'com.googlecode.mp4parser:isoparser:1.0.6'
    implementation 'com.stripe:stripe-android:2.0.2'
    implementation 'org.osmdroid:osmdroid-android:6.1.10'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
}

def getStringForConfig(String s) {
    return "\"" + s + "\""
}

android {
    compileSdkVersion 31
    buildToolsVersion '31.0.0'
    ndkVersion "21.4.7075529"

    defaultConfig.applicationId = "org.forkclient.messenger"

    sourceSets.main.jniLibs.srcDirs = ['./jni/']

    externalNativeBuild {
        cmake {
            path 'jni/CMakeLists.txt'
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        disable 'BlockedPrivateApi'
    }

    dexOptions {
        jumboMode = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8

        coreLibraryDesugaringEnabled true
    }

    signingConfigs {
        def github = System.getenv("GITHUB_REPOSITORY")
        if (github != null && github != "") {
            debug {
                storeFile file("config/release.keystore")
                storePassword System.getenv("KEYSTORE_PASS")
                keyAlias System.getenv("ALIAS_NAME")
                keyPassword System.getenv("ALIAS_PASS")
            }

            release {
                storeFile file("config/release.keystore")
                storePassword System.getenv("KEYSTORE_PASS")
                keyAlias System.getenv("ALIAS_NAME")
                keyPassword System.getenv("ALIAS_PASS")
            }
        } else {
            debug {
                storeFile file("config/release.keystore")
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }

            release {
                storeFile file("config/release.keystore")
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.debug
            applicationIdSuffix ".beta"
            minifyEnabled false
            shrinkResources false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
        }

        /*debugAsan {
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.debug
            applicationIdSuffix ".beta"
            minifyEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            packagingOptions {
                doNotStrip "**.so"
            }

            sourceSets {
                main {
                    jniLibs {
                        srcDir {
                            'jniLibs'
                        }
                    }
                    resources {
                        srcDir {
                            'jniRes'
                        }
                    }
                }
            }
        }*/

        HA {
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.debug
            applicationIdSuffix ".beta"
            minifyEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
        }

        standalone {
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.release
            applicationIdSuffix ".web"
            minifyEnabled true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
        }

        release {
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
        }
    }

    sourceSets.debug {
        manifest.srcFile 'config/debug/AndroidManifest.xml'
    }

    /*sourceSets.debugAsan {
        manifest.srcFile 'config/debug/AndroidManifest.xml'
    }*/

    sourceSets.HA {
        manifest.srcFile 'config/debug/AndroidManifest.xml'
    }

    sourceSets.standalone {
        manifest.srcFile 'config/release/AndroidManifest.xml'
    }

    sourceSets.release {
        manifest.srcFile 'config/release/AndroidManifest.xml'
    }

    flavorDimensions "minApi"

    productFlavors {
        armv7 {
            ndk {
                abiFilters "armeabi-v7a"
            }
            ext {
                abiVersionCode = 1
            }
        }
        x86 {
            ndk {
                abiFilters "x86"
            }
            ext {
                abiVersionCode = 2
            }
        }
        armv7_SDK23 {
            ndk {
                abiFilters "armeabi-v7a"
            }
            sourceSets.debug {
                manifest.srcFile 'config/debug/AndroidManifest_SDK23.xml'
            }
            sourceSets.release {
                manifest.srcFile 'config/release/AndroidManifest_SDK23.xml'
            }
            minSdkVersion 23
            ext {
                abiVersionCode = 3
            }
        }
        x86_SDK23 {
            ndk {
                abiFilters "x86"
            }
            sourceSets.debug {
                manifest.srcFile 'config/debug/AndroidManifest_SDK23.xml'
            }
            sourceSets.release {
                manifest.srcFile 'config/release/AndroidManifest_SDK23.xml'
            }
            minSdkVersion 23
            ext {
                abiVersionCode = 4
            }
        }
        arm64 {
            ndk {
                abiFilters "arm64-v8a"
            }
            ext {
                abiVersionCode = 5
            }
        }
        x64 {
            ndk {
                abiFilters "x86_64"
            }
            ext {
                abiVersionCode = 6
            }
        }
        arm64_SDK23 {
            ndk {
                abiFilters "arm64-v8a"
            }
            sourceSets.debug {
                manifest.srcFile 'config/debug/AndroidManifest_SDK23.xml'
            }
            sourceSets.release {
                manifest.srcFile 'config/release/AndroidManifest_SDK23.xml'
            }
            minSdkVersion 23
            ext {
                abiVersionCode = 7
            }
        }
        x64_SDK23 {
            ndk {
                abiFilters "x86_64"
            }
            sourceSets.debug {
                manifest.srcFile 'config/debug/AndroidManifest_SDK23.xml'
            }
            sourceSets.release {
                manifest.srcFile 'config/release/AndroidManifest_SDK23.xml'
            }
            minSdkVersion 23
            ext {
                abiVersionCode = 8
            }
        }
        afat {
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
            sourceSets.debug {
                manifest.srcFile 'config/debug/AndroidManifest_SDK23.xml'
            }
            sourceSets.release {
                manifest.srcFile 'config/release/AndroidManifest_SDK23.xml'
            }
            sourceSets.standalone {
                manifest.srcFile 'config/release/AndroidManifest_standalone.xml'
            }
            ext {
                abiVersionCode = 9
            }
        }
    }

    defaultConfig.versionCode = 2495

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "app.apk"
            output.versionCodeOverride = defaultConfig.versionCode * 10 + variant.productFlavors.get(0).abiVersionCode
        }
    }

    defaultConfig.versionCode = defaultConfig.versionCode * 10

    variantFilter { variant ->
        def names = variant.flavors*.name
        if (variant.buildType.name != "release" && !names.contains("afat")) {
            setIgnore(true)
        }
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        versionName "8.3.1"

        //obtain your own keys at https://core.telegram.org/api/obtaining_api_id
        buildConfigField 'int', 'APP_ID', System.getenv("APP_ID")
        buildConfigField 'String', 'APP_HASH', getStringForConfig(System.getenv("APP_HASH"))
        buildConfigField 'int', 'USER_ID_OWNER', System.getenv("USER_ID_OWNER")
        buildConfigField 'String', 'USER_REPO', getStringForConfig(System.getenv("USER_REPO"))
        buildConfigField 'int', 'CHECK_UPDATES', System.getenv("CHECK_UPDATES")

        vectorDrawables.generatedDensities = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi']

        def additional_build = System.getenv("ADDITIONAL_BUILD_NUMBER") as String
        defaultConfig.versionCode = defaultConfig.versionCode + additional_build.toInteger()
        versionName = versionName + "." + additional_build
        buildConfigField 'int', 'ADDITIONAL_BUILD_NUMBER', additional_build

        externalNativeBuild {
            cmake {
                version '3.10.2'
                arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-16', "-j=16"
                if (project.hasProperty("armeabi-v7a")) {
                    abiFilters 'armeabi-v7a'
                } else if (project.hasProperty("arm64-v8a")) {
                    abiFilters 'arm64-v8a'
                } else {
                    abiFilters 'armeabi-v7a', 'arm64-v8a'
                }
            }
        }
    }
}
